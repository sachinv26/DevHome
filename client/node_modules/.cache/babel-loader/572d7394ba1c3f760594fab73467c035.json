{"ast":null,"code":"import axios from 'axios';\nimport setAuthToken from '../utils/setAuthToken';\nimport jwt_decode from 'jwt-decode';\nimport { GET_ERRORS, SET_CURRENT_USER } from './types'; // registerUser Action Creator\n// We want to wait for the response from the server and then dispatch the action\n// Redux thunk allows us to use dispatch inside an action creator\n\nexport var registerUser = function registerUser(userData, history) {\n  return function (dispatch) {\n    axios.post('/api/users/register', userData).then(function () {\n      return history.push('/login');\n    }).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n}; // Login - Get User Token\n\nexport var loginUser = function loginUser(userData) {\n  return function (dispatch) {\n    axios.post('/api/users/login', userData).then(function (res) {\n      // Save to localStorage\n      var token = res.data.token; // Set token to localStorage\n\n      localStorage.setItem('jwtToken', token); // Set token to Auth header\n\n      setAuthToken(token); // Decode token to get user data\n\n      var decoded = jwt_decode(token); // Set current user\n\n      dispatch(setCurrentUser(decoded));\n    }).catch(function (err) {\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n}; // Set logged in user\n\nexport var setCurrentUser = function setCurrentUser(decoded) {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // Log user out\n\nexport var logoutUser = function logoutUser() {\n  return function (dispatch) {\n    // Remove token from localStorage\n    localStorage.removeItem('jwtToken'); // Remove auth header for future requests\n\n    setAuthToken(false); // Set current user to {} which will set isAuthenticated to false\n\n    dispatch(setCurrentUser({}));\n  };\n};","map":{"version":3,"sources":["Z:/DevArena/client/src/actions/authActions.js"],"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRENT_USER","registerUser","userData","history","dispatch","post","then","push","catch","err","type","payload","response","data","loginUser","res","token","localStorage","setItem","decoded","setCurrentUser","logoutUser","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,UAAT,EAAqBC,gBAArB,QAA6C,SAA7C,C,CAEA;AACA;AACA;;AACA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,QAAD,EAAWC,OAAX;AAAA,SAAuB,UAAAC,QAAQ,EAAI;AAC3DR,IAAAA,KAAK,CACAS,IADL,CACU,qBADV,EACiCH,QADjC,EAEKI,IAFL,CAEU;AAAA,aAAMH,OAAO,CAACI,IAAR,CAAa,QAAb,CAAN;AAAA,KAFV,EAGKC,KAHL,CAGW,UAAAC,GAAG;AAAA,aACNL,QAAQ,CAAC;AACLM,QAAAA,IAAI,EAAEX,UADD;AAELY,QAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFjB,OAAD,CADF;AAAA,KAHd;AASH,GAV2B;AAAA,CAArB,C,CAYP;;AACA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAZ,QAAQ;AAAA,SAAI,UAAAE,QAAQ,EAAI;AAC7CR,IAAAA,KAAK,CACAS,IADL,CACU,kBADV,EAC8BH,QAD9B,EAEKI,IAFL,CAEU,UAAAS,GAAG,EAAI;AACT;AADS,UAEDC,KAFC,GAESD,GAAG,CAACF,IAFb,CAEDG,KAFC,EAGT;;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC,EAJS,CAKT;;AACAnB,MAAAA,YAAY,CAACmB,KAAD,CAAZ,CANS,CAOT;;AACA,UAAMG,OAAO,GAAGrB,UAAU,CAACkB,KAAD,CAA1B,CARS,CAST;;AACAZ,MAAAA,QAAQ,CAACgB,cAAc,CAACD,OAAD,CAAf,CAAR;AACH,KAbL,EAcKX,KAdL,CAcW,UAAAC,GAAG,EAAI;AACVL,MAAAA,QAAQ,CAAC;AACLM,QAAAA,IAAI,EAAEX,UADD;AAELY,QAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFjB,OAAD,CAAR;AAIH,KAnBL;AAoBH,GArBgC;AAAA,CAA1B,C,CAuBP;;AACA,OAAO,IAAMO,cAAc,GAAG,SAAjBA,cAAiB,CAAAD,OAAO,EAAI;AACrC,SAAO;AACHT,IAAAA,IAAI,EAAEV,gBADH;AAEHW,IAAAA,OAAO,EAAEQ;AAFN,GAAP;AAIH,CALM,C,CAOP;;AACA,OAAO,IAAME,UAAU,GAAG,SAAbA,UAAa;AAAA,SAAM,UAAAjB,QAAQ,EAAI;AACxC;AACAa,IAAAA,YAAY,CAACK,UAAb,CAAwB,UAAxB,EAFwC,CAGxC;;AACAzB,IAAAA,YAAY,CAAC,KAAD,CAAZ,CAJwC,CAKxC;;AACAO,IAAAA,QAAQ,CAACgB,cAAc,CAAC,EAAD,CAAf,CAAR;AACH,GAPyB;AAAA,CAAnB","sourcesContent":["import axios from 'axios';\r\nimport setAuthToken from '../utils/setAuthToken';\r\nimport jwt_decode from 'jwt-decode';\r\nimport { GET_ERRORS, SET_CURRENT_USER } from './types';\r\n\r\n// registerUser Action Creator\r\n// We want to wait for the response from the server and then dispatch the action\r\n// Redux thunk allows us to use dispatch inside an action creator\r\nexport const registerUser = (userData, history) => dispatch => {\r\n    axios\r\n        .post('/api/users/register', userData)\r\n        .then(() => history.push('/login'))\r\n        .catch(err =>\r\n            dispatch({\r\n                type: GET_ERRORS,\r\n                payload: err.response.data\r\n            })\r\n        );\r\n};\r\n\r\n// Login - Get User Token\r\nexport const loginUser = userData => dispatch => {\r\n    axios\r\n        .post('/api/users/login', userData)\r\n        .then(res => {\r\n            // Save to localStorage\r\n            const { token } = res.data;\r\n            // Set token to localStorage\r\n            localStorage.setItem('jwtToken', token);\r\n            // Set token to Auth header\r\n            setAuthToken(token);\r\n            // Decode token to get user data\r\n            const decoded = jwt_decode(token);\r\n            // Set current user\r\n            dispatch(setCurrentUser(decoded));\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type: GET_ERRORS,\r\n                payload: err.response.data\r\n            });\r\n        });\r\n};\r\n\r\n// Set logged in user\r\nexport const setCurrentUser = decoded => {\r\n    return {\r\n        type: SET_CURRENT_USER,\r\n        payload: decoded\r\n    };\r\n};\r\n\r\n// Log user out\r\nexport const logoutUser = () => dispatch => {\r\n    // Remove token from localStorage\r\n    localStorage.removeItem('jwtToken');\r\n    // Remove auth header for future requests\r\n    setAuthToken(false);\r\n    // Set current user to {} which will set isAuthenticated to false\r\n    dispatch(setCurrentUser({}));\r\n};\r\n"]},"metadata":{},"sourceType":"module"}