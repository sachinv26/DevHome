{"ast":null,"code":"import axios from'axios';import setAuthToken from'../utils/setAuthToken';import jwt_decode from'jwt-decode';import{GET_ERRORS,SET_CURRENT_USER}from'./types';// registerUser Action Creator\n// We want to wait for the response from the server and then dispatch the action\n// Redux thunk allows us to use dispatch inside an action creator\nexport var registerUser=function registerUser(userData,history){return function(dispatch){axios.post('/api/users/register',userData).then(function(){return history.push('/login');}).catch(function(err){return dispatch({type:GET_ERRORS,payload:err.response.data});});};};// Login - Get User Token\nexport var loginUser=function loginUser(userData){return function(dispatch){axios.post('/api/users/login',userData).then(function(res){// Save to localStorage\nvar token=res.data.token;// Set token to localStorage\nlocalStorage.setItem('jwtToken',token);// Set token to Auth header\nsetAuthToken(token);// Decode token to get user data\nvar decoded=jwt_decode(token);// Set current user\ndispatch(setCurrentUser(decoded));}).catch(function(err){dispatch({type:GET_ERRORS,payload:err.response.data});});};};// Set logged in user\nexport var setCurrentUser=function setCurrentUser(decoded){return{type:SET_CURRENT_USER,payload:decoded};};// Log user out\nexport var logoutUser=function logoutUser(){return function(dispatch){// Remove token from localStorage\nlocalStorage.removeItem('jwtToken');// Remove auth header for future requests\nsetAuthToken(false);// Set current user to {} which will set isAuthenticated to false\ndispatch(setCurrentUser({}));};};","map":{"version":3,"sources":["Z:/DevArena/client/src/actions/authActions.js"],"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRENT_USER","registerUser","userData","history","dispatch","post","then","push","catch","err","type","payload","response","data","loginUser","res","token","localStorage","setItem","decoded","setCurrentUser","logoutUser","removeItem"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,YAAP,KAAyB,uBAAzB,CACA,MAAOC,CAAAA,UAAP,KAAuB,YAAvB,CACA,OAASC,UAAT,CAAqBC,gBAArB,KAA6C,SAA7C,CAEA;AACA;AACA;AACA,MAAO,IAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,QAAD,CAAWC,OAAX,QAAuB,UAAAC,QAAQ,CAAI,CAC3DR,KAAK,CACAS,IADL,CACU,qBADV,CACiCH,QADjC,EAEKI,IAFL,CAEU,iBAAMH,CAAAA,OAAO,CAACI,IAAR,CAAa,QAAb,CAAN,EAFV,EAGKC,KAHL,CAGW,SAAAC,GAAG,QACNL,CAAAA,QAAQ,CAAC,CACLM,IAAI,CAAEX,UADD,CAELY,OAAO,CAAEF,GAAG,CAACG,QAAJ,CAAaC,IAFjB,CAAD,CADF,EAHd,EASH,CAV2B,EAArB,CAYP;AACA,MAAO,IAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAAAZ,QAAQ,QAAI,UAAAE,QAAQ,CAAI,CAC7CR,KAAK,CACAS,IADL,CACU,kBADV,CAC8BH,QAD9B,EAEKI,IAFL,CAEU,SAAAS,GAAG,CAAI,CACT;AADS,GAEDC,CAAAA,KAFC,CAESD,GAAG,CAACF,IAFb,CAEDG,KAFC,CAGT;AACAC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAiCF,KAAjC,EACA;AACAnB,YAAY,CAACmB,KAAD,CAAZ,CACA;AACA,GAAMG,CAAAA,OAAO,CAAGrB,UAAU,CAACkB,KAAD,CAA1B,CACA;AACAZ,QAAQ,CAACgB,cAAc,CAACD,OAAD,CAAf,CAAR,CACH,CAbL,EAcKX,KAdL,CAcW,SAAAC,GAAG,CAAI,CACVL,QAAQ,CAAC,CACLM,IAAI,CAAEX,UADD,CAELY,OAAO,CAAEF,GAAG,CAACG,QAAJ,CAAaC,IAFjB,CAAD,CAAR,CAIH,CAnBL,EAoBH,CArBgC,EAA1B,CAuBP;AACA,MAAO,IAAMO,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAAAD,OAAO,CAAI,CACrC,MAAO,CACHT,IAAI,CAAEV,gBADH,CAEHW,OAAO,CAAEQ,OAFN,CAAP,CAIH,CALM,CAOP;AACA,MAAO,IAAME,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,SAAM,UAAAjB,QAAQ,CAAI,CACxC;AACAa,YAAY,CAACK,UAAb,CAAwB,UAAxB,EACA;AACAzB,YAAY,CAAC,KAAD,CAAZ,CACA;AACAO,QAAQ,CAACgB,cAAc,CAAC,EAAD,CAAf,CAAR,CACH,CAPyB,EAAnB","sourcesContent":["import axios from 'axios';\r\nimport setAuthToken from '../utils/setAuthToken';\r\nimport jwt_decode from 'jwt-decode';\r\nimport { GET_ERRORS, SET_CURRENT_USER } from './types';\r\n\r\n// registerUser Action Creator\r\n// We want to wait for the response from the server and then dispatch the action\r\n// Redux thunk allows us to use dispatch inside an action creator\r\nexport const registerUser = (userData, history) => dispatch => {\r\n    axios\r\n        .post('/api/users/register', userData)\r\n        .then(() => history.push('/login'))\r\n        .catch(err =>\r\n            dispatch({\r\n                type: GET_ERRORS,\r\n                payload: err.response.data\r\n            })\r\n        );\r\n};\r\n\r\n// Login - Get User Token\r\nexport const loginUser = userData => dispatch => {\r\n    axios\r\n        .post('/api/users/login', userData)\r\n        .then(res => {\r\n            // Save to localStorage\r\n            const { token } = res.data;\r\n            // Set token to localStorage\r\n            localStorage.setItem('jwtToken', token);\r\n            // Set token to Auth header\r\n            setAuthToken(token);\r\n            // Decode token to get user data\r\n            const decoded = jwt_decode(token);\r\n            // Set current user\r\n            dispatch(setCurrentUser(decoded));\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type: GET_ERRORS,\r\n                payload: err.response.data\r\n            });\r\n        });\r\n};\r\n\r\n// Set logged in user\r\nexport const setCurrentUser = decoded => {\r\n    return {\r\n        type: SET_CURRENT_USER,\r\n        payload: decoded\r\n    };\r\n};\r\n\r\n// Log user out\r\nexport const logoutUser = () => dispatch => {\r\n    // Remove token from localStorage\r\n    localStorage.removeItem('jwtToken');\r\n    // Remove auth header for future requests\r\n    setAuthToken(false);\r\n    // Set current user to {} which will set isAuthenticated to false\r\n    dispatch(setCurrentUser({}));\r\n};\r\n"]},"metadata":{},"sourceType":"module"}