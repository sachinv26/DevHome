{"ast":null,"code":"import _classCallCheck from\"Z:/DevArena/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"Z:/DevArena/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _assertThisInitialized from\"Z:/DevArena/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"Z:/DevArena/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"Z:/DevArena/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{withRouter}from'react-router-dom';import{connect}from'react-redux';import{registerUser}from'../../actions/authActions';import TextFieldGroup from'../common/TextFieldGroup';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Register=/*#__PURE__*/function(_Component){_inherits(Register,_Component);var _super=_createSuper(Register);function Register(){var _this;_classCallCheck(this,Register);_this=_super.call(this);_this.state={name:'',email:'',password:'',password2:'',errors:{}};// This is to bind the onChange listener function with the 'this' of the state (We don't need these if we use arrow functions like in Login component)\n_this.onChange=_this.onChange.bind(_assertThisInitialized(_this));_this.onSubmit=_this.onSubmit.bind(_assertThisInitialized(_this));return _this;}_createClass(Register,[{key:\"componentDidMount\",value:function componentDidMount(){if(this.props.auth.isAuthenticated){this.props.history.push('/dashboard');}}// If we receive new error props we are going to put them in the component state\n},{key:\"UNSAFE_componentWillReceiveProps\",value:function UNSAFE_componentWillReceiveProps(nextProps){if(nextProps.errors){this.setState({errors:nextProps.errors});}}// We need this for 2 way binding\n},{key:\"onChange\",value:function onChange(e){this.setState({[e.target.name]:e.target.value});}},{key:\"onSubmit\",value:function onSubmit(e){e.preventDefault();var newUser={name:this.state.name,email:this.state.email,password:this.state.password,password2:this.state.password2};this.props.registerUser(newUser,this.props.history);}},{key:\"render\",value:function render(){var errors=this.state.errors;return/*#__PURE__*/_jsx(\"div\",{className:\"register\",children:/*#__PURE__*/_jsx(\"div\",{className:\"container\",children:/*#__PURE__*/_jsx(\"div\",{className:\"row\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"col-md-8 m-auto\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"display-5 text-center\",children:\"Sign Up\"}),/*#__PURE__*/_jsx(\"p\",{className:\"lead text-center\",children:\"Create your DevArena account\"}),/*#__PURE__*/_jsxs(\"form\",{noValidate:true,onSubmit:this.onSubmit/* Avoid the native html5 validation for email */,children:[/*#__PURE__*/_jsx(TextFieldGroup,{placeholder:\"Name\",onChange:this.onChange,error:errors.name,value:this.state.name,name:\"name\"}),/*#__PURE__*/_jsx(TextFieldGroup,{placeholder:\"Email Address\",type:\"email\",onChange:this.onChange,error:errors.email,value:this.state.email,name:\"email\",info:\"This site uses Gravatar so if you want a profile image, use a Gravatar email\"}),/*#__PURE__*/_jsx(TextFieldGroup,{placeholder:\"Password\",type:\"password\",onChange:this.onChange,error:errors.password,value:this.state.password,name:\"password\"}),/*#__PURE__*/_jsx(TextFieldGroup,{placeholder:\"Confirm Password\",type:\"password\",onChange:this.onChange,error:errors.password2,value:this.state.password2,name:\"password2\"}),/*#__PURE__*/_jsx(\"input\",{type:\"submit\",className:\"btn btn-primary btn-lg btn-block\"})]})]})})})});}}]);return Register;}(Component);// The parenthesis are used in place of having a return statement\n// When updates in the Redux store happen, map them to this component's props\nvar mapStateToProps=function mapStateToProps(state){return{auth:state.auth,//The state.auth comes from the index.js of the reducers\nerrors:state.errors};};export default connect(mapStateToProps,{registerUser:registerUser})(withRouter(Register));","map":{"version":3,"sources":["Z:/DevArena/client/src/components/auth/Register.js"],"names":["React","Component","withRouter","connect","registerUser","TextFieldGroup","Register","state","name","email","password","password2","errors","onChange","bind","onSubmit","props","auth","isAuthenticated","history","push","nextProps","setState","e","target","value","preventDefault","newUser","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { registerUser } from '../../actions/authActions';\r\nimport TextFieldGroup from '../common/TextFieldGroup';\r\n\r\nclass Register extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            name: '',\r\n            email: '',\r\n            password: '',\r\n            password2: '',\r\n            errors: {}\r\n        };\r\n\r\n        // This is to bind the onChange listener function with the 'this' of the state (We don't need these if we use arrow functions like in Login component)\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.auth.isAuthenticated) {\r\n            this.props.history.push('/dashboard');\r\n        }\r\n    }\r\n\r\n    // If we receive new error props we are going to put them in the component state\r\n    UNSAFE_componentWillReceiveProps(nextProps) {\r\n        if (nextProps.errors) {\r\n            this.setState({ errors: nextProps.errors });\r\n        }\r\n    }\r\n\r\n    // We need this for 2 way binding\r\n    onChange(e) {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        const newUser = {\r\n            name: this.state.name,\r\n            email: this.state.email,\r\n            password: this.state.password,\r\n            password2: this.state.password2\r\n        };\r\n\r\n        this.props.registerUser(newUser, this.props.history);\r\n    }\r\n\r\n    render() {\r\n        const { errors } = this.state;\r\n\r\n        return (\r\n            <div className=\"register\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-8 m-auto\">\r\n                            <h1 className=\"display-5 text-center\">Sign Up</h1>\r\n                            <p className=\"lead text-center\">\r\n                                Create your DevArena account\r\n                            </p>\r\n                            <form\r\n                                noValidate\r\n                                onSubmit={\r\n                                    this.onSubmit\r\n                                } /* Avoid the native html5 validation for email */\r\n                            >\r\n                                <TextFieldGroup\r\n                                    placeholder=\"Name\"\r\n                                    onChange={this.onChange}\r\n                                    error={errors.name}\r\n                                    value={this.state.name}\r\n                                    name=\"name\"\r\n                                />\r\n                                <TextFieldGroup\r\n                                    placeholder=\"Email Address\"\r\n                                    type=\"email\"\r\n                                    onChange={this.onChange}\r\n                                    error={errors.email}\r\n                                    value={this.state.email}\r\n                                    name=\"email\"\r\n                                    info=\"This site uses Gravatar so if you want a profile image, use a Gravatar email\"\r\n                                />\r\n                                <TextFieldGroup\r\n                                    placeholder=\"Password\"\r\n                                    type=\"password\"\r\n                                    onChange={this.onChange}\r\n                                    error={errors.password}\r\n                                    value={this.state.password}\r\n                                    name=\"password\"\r\n                                />\r\n                                <TextFieldGroup\r\n                                    placeholder=\"Confirm Password\"\r\n                                    type=\"password\"\r\n                                    onChange={this.onChange}\r\n                                    error={errors.password2}\r\n                                    value={this.state.password2}\r\n                                    name=\"password2\"\r\n                                />\r\n                                <input type=\"submit\" className=\"btn btn-primary btn-lg btn-block\" />\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nRegister.propTypes = {\r\n    registerUser: PropTypes.func.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n    errors: PropTypes.object.isRequired\r\n};\r\n\r\n// The parenthesis are used in place of having a return statement\r\n// When updates in the Redux store happen, map them to this component's props\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth, //The state.auth comes from the index.js of the reducers\r\n    errors: state.errors\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    { registerUser }\r\n)(withRouter(Register));\r\n"]},"metadata":{},"sourceType":"module"}